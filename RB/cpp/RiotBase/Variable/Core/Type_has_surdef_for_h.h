/// This file is generated (by bin/Method_template.py). Do not modify it directly.
bool Type::has_surdef_for( RF_del r ) { double tmp; return surdef_for( r, tmp ); }
bool Type::has_surdef_for( RF_copy r ) { double tmp; return surdef_for( r, tmp ); }
bool Type::has_surdef_for( RF_write_to_stream r ) { double tmp; return surdef_for( r, tmp ); }
bool Type::has_surdef_for( RF_write_structure r ) { double tmp; return surdef_for( r, tmp ); }
bool Type::has_surdef_for( RF_write_graphviz r ) { double tmp; return surdef_for( r, tmp ); }
bool Type::has_surdef_for( RF_category r ) { double tmp; return surdef_for( r, tmp ); }
bool Type::has_surdef_for( RF_to_std_string r ) { double tmp; return surdef_for( r, tmp ); }
bool Type::has_surdef_for( RF_to_Inode r ) { double tmp; return surdef_for( r, tmp ); }
bool Type::has_surdef_for( RF_to_SI64 r ) { double tmp; return surdef_for( r, tmp ); }
bool Type::has_surdef_for( RF_to_PI64 r ) { double tmp; return surdef_for( r, tmp ); }
bool Type::has_surdef_for( RF_to_SI32 r ) { double tmp; return surdef_for( r, tmp ); }
bool Type::has_surdef_for( RF_to_PI32 r ) { double tmp; return surdef_for( r, tmp ); }
bool Type::has_surdef_for( RF_to_SI16 r ) { double tmp; return surdef_for( r, tmp ); }
bool Type::has_surdef_for( RF_to_PI16 r ) { double tmp; return surdef_for( r, tmp ); }
bool Type::has_surdef_for( RF_to_SI8 r ) { double tmp; return surdef_for( r, tmp ); }
bool Type::has_surdef_for( RF_to_PI8 r ) { double tmp; return surdef_for( r, tmp ); }
bool Type::has_surdef_for( RF_to_Bool r ) { double tmp; return surdef_for( r, tmp ); }
bool Type::has_surdef_for( RF_to_PT r ) { double tmp; return surdef_for( r, tmp ); }
bool Type::has_surdef_for( RF_dasi r ) { double tmp; return surdef_for( r, tmp ); }
bool Type::has_surdef_for( RF_apply_DaSi r ) { double tmp; return surdef_for( r, tmp ); }
bool Type::has_surdef_for( RF_neg_o r ) { double tmp; return surdef_for( r, tmp ); }
bool Type::has_surdef_for( RF_neg_b r ) { double tmp; return surdef_for( r, tmp ); }
bool Type::has_surdef_for( RF_make_ot_wrapper r ) { double tmp; return surdef_for( r, tmp ); }
bool Type::has_surdef_for( RF_pull_ot_changes r ) { double tmp; return surdef_for( r, tmp ); }
bool Type::has_surdef_for( RF_write_ot_data r ) { double tmp; return surdef_for( r, tmp ); }
bool Type::has_surdef_for( RF_new_ot_merger r ) { double tmp; return surdef_for( r, tmp ); }
bool Type::has_surdef_for( RF_new_cursor r ) { double tmp; return surdef_for( r, tmp ); }
bool Type::has_surdef_for( RF_rem_cursor r ) { double tmp; return surdef_for( r, tmp ); }
bool Type::has_surdef_for( RF_get_cursors r ) { double tmp; return surdef_for( r, tmp ); }
bool Type::has_surdef_for( RF_get_possible_rights r ) { double tmp; return surdef_for( r, tmp ); }
bool Type::has_surdef_for( RF_get_groups_in_acl r ) { double tmp; return surdef_for( r, tmp ); }
bool Type::has_surdef_for( RF_get_users_in_acl r ) { double tmp; return surdef_for( r, tmp ); }
bool Type::has_surdef_for( RF_get_grp_rights r ) { double tmp; return surdef_for( r, tmp ); }
bool Type::has_surdef_for( RF_get_usr_rights r ) { double tmp; return surdef_for( r, tmp ); }
bool Type::has_surdef_for( RF_add_grp_right r ) { double tmp; return surdef_for( r, tmp ); }
bool Type::has_surdef_for( RF_add_usr_right r ) { double tmp; return surdef_for( r, tmp ); }
bool Type::has_surdef_for( RF_rem_grp_right r ) { double tmp; return surdef_for( r, tmp ); }
bool Type::has_surdef_for( RF_rem_usr_right r ) { double tmp; return surdef_for( r, tmp ); }
bool Type::has_surdef_for( RF_self_on_change r ) { double tmp; return surdef_for( r, tmp ); }
bool Type::has_surdef_for( RF_on_change_s r ) { double tmp; return surdef_for( r, tmp ); }
bool Type::has_surdef_for( RF_on_change_s_extr r ) { double tmp; return surdef_for( r, tmp ); }
bool Type::has_surdef_for( RF_on_change_o r ) { double tmp; return surdef_for( r, tmp ); }
bool Type::has_surdef_for( RF_on_change_b r ) { double tmp; return surdef_for( r, tmp ); }
bool Type::has_surdef_for( RF_self_then r ) { double tmp; return surdef_for( r, tmp ); }
bool Type::has_surdef_for( RF_then_s r ) { double tmp; return surdef_for( r, tmp ); }
bool Type::has_surdef_for( RF_then_s_extr r ) { double tmp; return surdef_for( r, tmp ); }
bool Type::has_surdef_for( RF_then_o r ) { double tmp; return surdef_for( r, tmp ); }
bool Type::has_surdef_for( RF_then_b r ) { double tmp; return surdef_for( r, tmp ); }
bool Type::has_surdef_for( RF_sig_change r ) { double tmp; return surdef_for( r, tmp ); }
bool Type::has_surdef_for( RF_common_symbolic_data r ) { double tmp; return surdef_for( r, tmp ); }
bool Type::has_surdef_for( RF_nb_symbolic_children r ) { double tmp; return surdef_for( r, tmp ); }
bool Type::has_surdef_for( RF_symbolic_child r ) { double tmp; return surdef_for( r, tmp ); }
bool Type::has_surdef_for( RF_is_symbolic r ) { double tmp; return surdef_for( r, tmp ); }
bool Type::has_surdef_for( RF_is_a_s_op r ) { double tmp; return surdef_for( r, tmp ); }
bool Type::has_surdef_for( RF_exec r ) { double tmp; return surdef_for( r, tmp ); }
bool Type::has_surdef_for( RF_launch r ) { double tmp; return surdef_for( r, tmp ); }
bool Type::has_surdef_for( RF_exec_mp r ) { double tmp; return surdef_for( r, tmp ); }
bool Type::has_surdef_for( RF_del_or_cancel_exec r ) { double tmp; return surdef_for( r, tmp ); }
bool Type::has_surdef_for( RF_get_lazy_source_info r ) { double tmp; return surdef_for( r, tmp ); }
bool Type::has_surdef_for( RF_serialize r ) { double tmp; return surdef_for( r, tmp ); }
bool Type::has_surdef_for( RF_set_child r ) { double tmp; return surdef_for( r, tmp ); }
bool Type::has_surdef_for( RF_prox_ptr r ) { double tmp; return surdef_for( r, tmp ); }
bool Type::has_surdef_for( RF_prox_ref r ) { double tmp; return surdef_for( r, tmp ); }
bool Type::has_surdef_for( RF_prox_val r ) { double tmp; return surdef_for( r, tmp ); }
bool Type::has_surdef_for( RF_get_size r ) { double tmp; return surdef_for( r, tmp ); }
bool Type::has_surdef_for( RF_get_size_PT r ) { double tmp; return surdef_for( r, tmp ); }
bool Type::has_surdef_for( RF_front_b r ) { double tmp; return surdef_for( r, tmp ); }
bool Type::has_surdef_for( RF_back_b r ) { double tmp; return surdef_for( r, tmp ); }
bool Type::has_surdef_for( RF_front_list_b r ) { double tmp; return surdef_for( r, tmp ); }
bool Type::has_surdef_for( RF_back_list_b r ) { double tmp; return surdef_for( r, tmp ); }
bool Type::has_surdef_for( RF_head_b r ) { double tmp; return surdef_for( r, tmp ); }
bool Type::has_surdef_for( RF_tail_b r ) { double tmp; return surdef_for( r, tmp ); }
bool Type::has_surdef_for( RF_apply r ) { double tmp; return surdef_for( r, tmp ); }
bool Type::has_surdef_for( RF_bind_by_path r ) { double tmp; return surdef_for( r, tmp ); }
bool Type::has_surdef_for( RF_bind_by_object_id r ) { double tmp; return surdef_for( r, tmp ); }
bool Type::has_surdef_for( RF_bind_by_kn_object_id_o r ) { double tmp; return surdef_for( r, tmp ); }
bool Type::has_surdef_for( RF_bind_by_kn_object_id_b r ) { double tmp; return surdef_for( r, tmp ); }
bool Type::has_surdef_for( RF_self_make_inode_if_z r ) { double tmp; return surdef_for( r, tmp ); }
bool Type::has_surdef_for( RF_make_inode_if_z_s r ) { double tmp; return surdef_for( r, tmp ); }
bool Type::has_surdef_for( RF_make_inode_if_z_s_extr r ) { double tmp; return surdef_for( r, tmp ); }
bool Type::has_surdef_for( RF_make_inode_if_z_o r ) { double tmp; return surdef_for( r, tmp ); }
bool Type::has_surdef_for( RF_make_inode_if_z_b r ) { double tmp; return surdef_for( r, tmp ); }
bool Type::has_surdef_for( RF_self_special_func r ) { double tmp; return surdef_for( r, tmp ); }
bool Type::has_surdef_for( RF_special_func_s r ) { double tmp; return surdef_for( r, tmp ); }
bool Type::has_surdef_for( RF_special_func_s_extr r ) { double tmp; return surdef_for( r, tmp ); }
bool Type::has_surdef_for( RF_special_func_o r ) { double tmp; return surdef_for( r, tmp ); }
bool Type::has_surdef_for( RF_special_func_b r ) { double tmp; return surdef_for( r, tmp ); }
